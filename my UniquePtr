#pragma once

#include "compressed_pair.h"
#include <utility>
#include <vector>
#include <cstddef>  // std::nullptr_t

template <typename T>
struct Slug {
    void operator()(T* ptr) {
        delete ptr;
    }
};

// Primary template
template <typename T, typename Deleter = Slug<T>>
class UniquePtr : CompressedPairElement<Deleter, 0> {
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    explicit UniquePtr(T* ptr = nullptr) {
        ptr_ = ptr;
    }
    template <typename Del>
    UniquePtr(T* ptr, Del&& deleter)
        : ptr_(ptr), CompressedPairElement<Deleter, 0>(std::forward<Del>(deleter)) {
    }
    //    UniquePtr(T* ptr, Deleter&& deleter): ptr_(ptr), CompressedPairElement<Deleter,
    //    0>(std::forward<Deleter>(deleter)) {
    //    }
    //    UniquePtr(UniquePtr&& other) noexcept : ptr_(other.ptr_) {
    //        other.ptr_ = nullptr;
    //    }
    UniquePtr(UniquePtr&& other) noexcept
        : ptr_(other.Get()),
          CompressedPairElement<Deleter, 0>(
              std::forward<Deleter>(other.CompressedPairElement<Deleter, 0>::Get())) {
        other.Release();
    }
    template <typename Del>
    UniquePtr(UniquePtr<T, Del>&& other) noexcept
        : ptr_(other.Get()),
          CompressedPairElement<Deleter, 0>(std::forward<Del>(other.GetDeleter())) {
        other.Release();
    }
    template <typename T1>
    UniquePtr(UniquePtr<T1>&& other) noexcept : ptr_(other.Get()) {
        other.Release();
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    //     operator=-s

    UniquePtr& operator=(UniquePtr&& other) noexcept {
        if (ptr_ == other.ptr_) {
            return *this;
        }
        CompressedPairElement<Deleter, 0>::Get() =
            std::forward<Deleter>(other.CompressedPairElement<Deleter, 0>::Get());
        Reset(other.Release());
        return *this;
    }

    UniquePtr& operator=(std::nullptr_t) noexcept {
        Reset();
        return *this;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Destructor

    ~UniquePtr() {
        if(ptr_){
            CompressedPairElement<Deleter, 0>::Get()(ptr_);
        }

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Modifiers

    T* Release() {
        T* result = nullptr;
        std::swap(result, ptr_);
        return result;
    }
    void Reset(T* ptr = nullptr) {
        T* old_p = ptr_;
        ptr_ = ptr;
        if (old_p) {
            CompressedPairElement<Deleter, 0>::Get()(old_p);
        }
    }
    void Swap(UniquePtr& other) noexcept {
        std::swap(ptr_, other.ptr_);
        std::swap(CompressedPairElement<Deleter, 0>::Get(),
                  other.CompressedPairElement<Deleter, 0>::Get());
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Observers

    T* Get() const {
        return ptr_;
    }
    T* Get() {
        return ptr_;
    }
    Deleter& GetDeleter() {
        return CompressedPairElement<Deleter, 0>::Get();
    }
    const Deleter& GetDeleter() const {
        return CompressedPairElement<Deleter, 0>::Get();
    }
    explicit operator bool() const {
        return ptr_;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Single-object dereference operators

    auto operator*() const {
        return *ptr_;
    }
    T* operator->() const {
        return ptr_;
    }

private:
    //    CompressedPair<T,Deleter>my_comp;
    T* ptr_;
    //    Deleter deleter_;
};

// template <typename T>
// struct Slug_1 {
//     void operator()(T* ptr) {
//         delete[] ptr;
//     }
// };
//  Specialization for arrays
template <typename T>
struct Slug<T[]> {
    void operator()(T* ptr) {
        delete[] ptr;
    }
};
template <typename T, typename Deleter>
class UniquePtr<T[], Deleter> {
public:
    explicit UniquePtr(T* ptr = nullptr) : ptr_(ptr), deleter_(Deleter()) {
    }
    //    template <typename Del>
    //    UniquePtr(T* ptr, Del deleter) : ptr_(ptr), deleter_(std::forward<Del>(deleter)) {
    //    }
    UniquePtr(T* ptr, Deleter deleter) : ptr_(ptr), deleter_(std::forward<Deleter>(deleter)) {
    }
    void Reset(T* ptr = nullptr) {
        is_reset_ = true;
        if(ptr_){
            deleter_(ptr_);
        }
        //        delete[] ptr_;
    }
    T& operator[](int index) {
        return ptr_[index];
    }
    const T& operator[](int index) const {
        return ptr_[index];
    }
    ~UniquePtr() {
        if (!is_reset_) {
            if(ptr_){
                deleter_(ptr_);
            }
        }
    };

private:
    T* ptr_;
    Deleter deleter_;
    bool is_reset_ = false;
};
// int main() {
//     std::unique_ptr<unsigned char[]> testData(new unsigned char[16000]());
// }
